#include "/Engine/Private/Common.ush"

//--------------------------------------------------------------------------------------
// Structs
//--------------------------------------------------------------------------------------
struct Particle{
    float3 position;
    float  time;
};

//--------------------------------------------------------------------------------------
// Buffers
//--------------------------------------------------------------------------------------
RWStructuredBuffer<Particle> particles;

float hash12(float2 p)
{
    float3 p3 = frac(float3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.x + p3.y) * p3.z);
}


[numthreads(256, 1, 1)]
void MainComputeShader(uint3 ThreadId : SV_DispatchThreadID)
{
    int index = ThreadId.x;
    float3 position = particles[index].position;
	position.z += sin(particles[index].time) * hash12(position.z + 0.01); // * cos(particles[index].time) * 10;
    position.x += sin(particles[index].time) * hash12(position.x + 0.01); // * sin(particles[index].time) * 10;
    position.y += sin(particles[index].time)* hash12(position.y + 0.01);

    particles[index].time +=  0.016f ;
    particles[index].position = position;
}
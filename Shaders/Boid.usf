#include "/Engine/Private/Common.ush"

//--------------------------------------------------------------------------------------
// Structs
//--------------------------------------------------------------------------------------
struct Particle{
    float3 position;
    float3 fce;
    float  time;
};

//--------------------------------------------------------------------------------------
// Buffers
//--------------------------------------------------------------------------------------
RWStructuredBuffer<Particle> particles_read;
RWStructuredBuffer<Particle> particles_write;
cbuffer Global{
    float deltaTime;
};



float hash12(float2 p)
{
    float3 p3 = frac(float3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.x + p3.y) * p3.z);
}
float ComputeForce(float r)
{	
    float eps = 1.7f;
    float sig = 1.f;

	//V = 4 * eps * (pow(sig / r, 12) - pow(sig / r, 6)); // potencial field
	float U = 4 * eps * ((pow(6 * sig, 6) / pow(r, 7)) - (pow(12 * sig, 12) / pow(r, 13)));

	return U;
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void MainComputeShader(uint3 ThreadId : SV_DispatchThreadID)
{

    int index = ThreadId.x;
    uint numStructs, stride;
    particles_read.GetDimensions(numStructs,stride);


    float3 position = particles_read[index].position;
    float time = particles_read[numStructs - index].time;
	//position.z += sin(time);

    
    float force = 0.0f;
    float3 fce = float3(0.0f,0.0f,0.0f);


    for(int i = 0; i < numStructs; i++){
        if(i == index) continue;
        float3 loc = particles_read[i].position;
        float3 res = loc - position;
        float u = ComputeForce(length(res));
        fce += normalize(res);
        force+= u;
    }
    particles_write[index].fce = force * deltaTime;
    particles_write[index].time +=  0.016f ;
    particles_write[index].position = position;
}
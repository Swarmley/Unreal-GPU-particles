#include "/Engine/Private/Common.ush"

//--------------------------------------------------------------------------------------
// Structs
//--------------------------------------------------------------------------------------
struct Particle{
    float3 position;
    float3 velocity;
};
struct ParticleForce {
	float3 force;
};
struct ParticleDensity {
	float density;
};
//--------------------------------------------------------------------------------------
// Buffers
//--------------------------------------------------------------------------------------

RWStructuredBuffer<Particle> particles_read;
RWStructuredBuffer<Particle> particles_write;

RWStructuredBuffer<ParticleForce> particlesForce_read;

RWStructuredBuffer<ParticleDensity> particlesDensity_read;


float mass;
float delta_time;
int numParticles;
float3 minBoundary;
float3 maxBoundary;
float  damping;
float  epsilon;


[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void MainComputeShader(uint3 Gid : SV_GroupID, //atm: -, 0...256, - in rows (Y)        --> current group index (dispatched by c++)
                       uint3 ThreadId : SV_DispatchThreadID, //atm: 0...256 in rows & columns (XY)   --> "global" thread id
                       uint3 GTid : SV_GroupThreadID, //atm: 0...256, -,- in columns (X)      --> current threadId in group / "local" threadId
                       uint GI : SV_GroupIndex)            //atm: 0...256 in columns (X)           --> "flattened" index of a thread within a group))
{
    
    int index = ThreadId.x;
    if(index >= numParticles)
        return;
    Particle particle = particles_read[index];

    
    float3 position = particles_read[index].position;
    float3 velocity = particles_read[index].velocity;
    float density = particlesDensity_read[index].density;
    
    float3 force = particlesForce_read[index].force;

    float3 acceleration = float3(0,0,0);
    acceleration +=  force;

    velocity += acceleration * delta_time;
    position += velocity * delta_time;
    
    
    //enforce bounds
    if(position.x - epsilon < minBoundary.x){
        velocity.x *= damping;
        position.x  = minBoundary.x + epsilon;
    }
    else if(position.x + epsilon + 1 > maxBoundary.x){
        velocity.x *= damping;
        position.x  = maxBoundary.x - epsilon - 1;
    }
    if(position.y - epsilon < minBoundary.y){
        velocity.y *= damping;
        position.y  = minBoundary.y + epsilon;
    }else if(position.y + epsilon + 1 > maxBoundary.y){
        velocity.y *= damping;
        position.y  = maxBoundary.y - epsilon - 1;
    }
    if(position.z - epsilon < minBoundary.z){
        velocity.z *= damping;
        position.z  = minBoundary.z + epsilon;
    } else if(position.z + epsilon + 1 > maxBoundary.z){
        velocity.z *= damping;
        position.z  = maxBoundary.z - epsilon - 1;
    }
    
    




    particles_write[index].velocity = velocity;
    particles_write[index].position = position;
}